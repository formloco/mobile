{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["Route","hostRef","this","ionRouteDataChanged","url","newValue","emit","oldValue","keys1","Object","keys","keys2","length","key","onUpdate","RouteRedirect","ionRouteRedirectChanged","generatePath","segments","filter","s","join","parsePath","path","queryString","qsStart","indexOf","substr","split","map","trim","writeNavState","async","root","chain","direction","index","changed","animation","outlet","searchNavNode","Promise","resolve","c","route","setRouteId","id","params","result","element","markVisible","console","error","e","QUERY","matches","querySelector","findRouteRedirect","redirects","find","redirect","from","i","expected","matchesIDs","ids","len","Math","min","toLowerCase","matchesPath","inputPath","allparams","RouterSegments","matchesDefault","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","routerPathToChain","chains","match","matchedChain","score","computePriority","level","pow","f","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","to","readRoutes","flattenRouterTree","readRouteNodes","node","component","componentProps","nodes","flattenNode","push","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","document","body","window","addEventListener","once","runGuards","getPath","canProceed","setPath","writeNavStateRoot","onRoutesChanged","onRedirectChanged","bind","historyDirection","ev","detail","register","processNextHandler","back","startsWith","URL","location","href","pathname","parsedPath","history","waitPromise","routes","group","forEach","r","debug","groupEnd","warn","getRouteId","maxMatches","plainIDs","param","safeWriteNavState","_a","win","replaceState","title","redirectFrom","lock","unlock","p","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","pushState","loc","prefix","hash","redirectFromPath","redirectedFrom","RouterLink","routerDirection","onClick","routerAnimation","mode","attrs","rel","target","class","color","style"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let i = 0;\n  for (; i < len; i++) {\n    if (ids[i].toLowerCase() !== chain[i].id) {\n      break;\n    }\n  }\n  return i;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  const plainIDs = ids.map(i => i.id);\n  for (const chain of chains) {\n    const score = matchesIDs(plainIDs, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * By default `ion-router` will match the routes at the root path (\"/\").\n     * That can be changed when\n     *\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}